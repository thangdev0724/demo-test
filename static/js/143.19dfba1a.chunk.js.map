{"version":3,"file":"static/js/143.19dfba1a.chunk.js","mappings":"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","sources":["apis/modules/Common.ts","apis/modules/Jobs.ts","apis/axiosInstance.ts","apis/services.ts","assets/Icon/IconPencil.tsx","assets/Icon/IconTrash.tsx","components/BaseTable/TableHead.tsx","assets/Icon/IconArrowLeft.tsx","assets/Icon/IconArrowRight.tsx","components/BaseTable/index.tsx","components/Form/JobForm/index.tsx","constants/services.ts","libs/notification.ts","constants/common.ts","utils/helpers.ts","pages/Jobs/detail/component/DetailDrawer.tsx","pages/Jobs/detail/index.tsx","apis/modules/Candidates.ts"],"sourcesContent":["import { getRequest } from 'apis/services';\r\n\r\nfunction getDepartments() {\r\n  return getRequest({\r\n    url: `/public/departments`\r\n  });\r\n}\r\n\r\nfunction getLocations() {\r\n  return getRequest({\r\n    url: `/public/locations`\r\n  });\r\n}\r\n\r\nfunction getExperiences() {\r\n  return getRequest({\r\n    url: `/public/experiences`\r\n  });\r\n}\r\n\r\nfunction getCandidateStatus() {\r\n  return getRequest({\r\n    url: `/public/candidate-statuses`\r\n  });\r\n}\r\n\r\nfunction getWorkingTime() {\r\n  return getRequest({\r\n    url: `/public/working-times`\r\n  });\r\n}\r\n\r\nexport { getDepartments, getLocations, getExperiences, getCandidateStatus, getWorkingTime };\r\n","import { deleteRequest, getRequest, patchRequest, postRequest, putRequest } from 'apis/services';\r\nimport { IJobForm } from 'models/jobs';\r\n\r\nfunction createJob(newItem: IJobForm) {\r\n  return postRequest({\r\n    url: '/admin/jobs',\r\n    payload: newItem\r\n  });\r\n}\r\n\r\nfunction getListJob(params: any) {\r\n  return getRequest({\r\n    url: '/admin/jobs',\r\n    params\r\n  });\r\n}\r\n\r\nfunction updateJob(id?: number | string, updatedItem?: IJobForm | any) {\r\n  return putRequest({\r\n    url: `/admin/jobs/${id}`,\r\n    payload: updatedItem\r\n  });\r\n}\r\n\r\nfunction deleteJob(id: number | string) {\r\n  return deleteRequest({\r\n    url: `/admin/jobs/${id}`\r\n  });\r\n}\r\n\r\nfunction getJobById(id: number | string) {\r\n  return getRequest({\r\n    url: `/admin/jobs/${id}`\r\n  });\r\n}\r\n\r\nfunction updateStatusJob(id: number | string, status: string) {\r\n  return patchRequest({\r\n    url: `/admin/jobs/${id}`,\r\n    payload: {\r\n      status\r\n    }\r\n  });\r\n}\r\n\r\nexport { createJob, deleteJob, getJobById, getListJob, updateJob, updateStatusJob };\r\n","import axios, { AxiosError, AxiosResponse, InternalAxiosRequestConfig } from 'axios';\r\nimport set from 'lodash/set';\r\nimport get from 'lodash/get';\r\nimport { getCookie } from 'utils/cookies';\r\nimport { BASE_API_URL, CookieKeys } from 'constants/services';\r\n\r\nconst axiosInstance = axios.create({\r\n  headers: {\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json'\r\n  },\r\n  baseURL: BASE_API_URL,\r\n  timeout: 20000,\r\n  validateStatus: function (status) {\r\n    return status >= 200 && status < 300;\r\n  }\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n  (request: InternalAxiosRequestConfig<any>) => {\r\n    const token = getCookie(CookieKeys.Token);\r\n    if (!token) {\r\n      return request;\r\n    }\r\n    set(request, 'headers.Authorization', `Bearer ${token}`);\r\n    return request;\r\n  },\r\n  (_error: any) => {\r\n    console.log('🚀 ~ axiosInstance.interceptors.request.use ~ _error:', _error);\r\n    const errorResponse = {\r\n      status: null,\r\n      message: null,\r\n      errors: null\r\n    };\r\n    return Promise.reject(errorResponse);\r\n  }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (response: AxiosResponse) => {\r\n    if (response && response.data) {\r\n      return response.data;\r\n    }\r\n    return response;\r\n  },\r\n  (error: AxiosError) => {\r\n    if (error.response?.status === 401) {\r\n      // window.location.href = '/login';\r\n      return Promise.reject(error);\r\n    }\r\n    const errorResponse = {\r\n      status: get(error, 'response.status', null),\r\n      message: get(error, 'response.data.message', null),\r\n      errors: get(error, 'response.data.errors', null)\r\n    };\r\n    return Promise.reject(errorResponse);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n","import { AxiosHeaders, Method, RawAxiosRequestHeaders } from \"axios\";\r\nimport axiosInstance from \"./axiosInstance\";\r\n\r\ntype MethodsHeaders = Partial<{\r\n    [Key in Method as Lowercase<Key>]: AxiosHeaders;\r\n} & { common: AxiosHeaders }>;\r\n\r\nexport const getRequest = (data: {\r\n    url: string, params?: any, headers?: (RawAxiosRequestHeaders & MethodsHeaders\r\n    ) | AxiosHeaders\r\n}) => {\r\n    const { url, params, headers } = data\r\n    return axiosInstance.get(url, {\r\n        params,\r\n        headers\r\n    })\r\n}\r\n\r\n\r\nexport const postRequest = (data: {\r\n    url: string, payload?: any, params?: any, headers?: (RawAxiosRequestHeaders & MethodsHeaders\r\n    ) | AxiosHeaders\r\n}) => {\r\n    const { url, params, headers, payload } = data\r\n    return axiosInstance.post(url, payload, {\r\n        params,\r\n        headers\r\n    })\r\n}\r\n\r\n\r\nexport const putRequest = (data: {\r\n    url: string, payload?: any, params?: any, headers?: (RawAxiosRequestHeaders & MethodsHeaders\r\n    ) | AxiosHeaders\r\n}) => {\r\n    const { url, params, headers, payload } = data\r\n    return axiosInstance.put(url, payload, {\r\n        params,\r\n        headers\r\n    })\r\n}\r\n\r\nexport const patchRequest = (data: {\r\n    url: string, payload?: any, params?: any, headers?: (RawAxiosRequestHeaders & MethodsHeaders\r\n    ) | AxiosHeaders\r\n}) => {\r\n    const { url, params, headers, payload } = data\r\n    return axiosInstance.patch(url, payload, {\r\n        params,\r\n        headers\r\n    })\r\n}\r\n\r\nexport const deleteRequest = (data: {\r\n    url: string, params?: any, headers?: (RawAxiosRequestHeaders & MethodsHeaders\r\n    ) | AxiosHeaders\r\n}) => {\r\n    const { url, params, headers } = data\r\n    return axiosInstance.delete(url, {\r\n        params,\r\n        headers\r\n    })\r\n}","function IconPencil() {\r\n    return (\r\n        <svg width=\"25\" height=\"24\" viewBox=\"0 0 25 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path\r\n                d=\"M9.50001 20.2504H5C4.80109 20.2504 4.61033 20.1714 4.46967 20.0307C4.32902 19.8901 4.25 19.6993 4.25 19.5004V15.3098C4.24966 15.2124 4.26853 15.1159 4.30553 15.0258C4.34253 14.9357 4.39694 14.8538 4.46563 14.7848L15.7156 3.53478C15.7854 3.46392 15.8686 3.40764 15.9603 3.36923C16.0521 3.33082 16.1505 3.31104 16.25 3.31104C16.3495 3.31104 16.4479 3.33082 16.5397 3.36923C16.6314 3.40764 16.7146 3.46392 16.7844 3.53478L20.9656 7.71603C21.0365 7.78582 21.0928 7.869 21.1312 7.96074C21.1696 8.05248 21.1894 8.15095 21.1894 8.25041C21.1894 8.34986 21.1696 8.44833 21.1312 8.54007C21.0928 8.63181 21.0365 8.71499 20.9656 8.78478L9.50001 20.2504Z\"\r\n                stroke=\"#666666\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n            />\r\n            <path\r\n                d=\"M20.75 20.2505H9.5\"\r\n                stroke=\"#666666\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n            />\r\n            <path\r\n                d=\"M13.25 6.00049L18.5 11.2505\"\r\n                stroke=\"#666666\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n            />\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default IconPencil;\r\n","import React from 'react';\r\n\r\nfunction IconTrash() {\r\n    return (\r\n        <svg width=\"25\" height=\"24\" viewBox=\"0 0 25 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path\r\n                d=\"M20.75 5.25049H4.25\"\r\n                stroke=\"#666666\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n            />\r\n            <path\r\n                d=\"M10.25 9.75049V15.7505\"\r\n                stroke=\"#666666\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n            />\r\n            <path\r\n                d=\"M14.75 9.75049V15.7505\"\r\n                stroke=\"#666666\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n            />\r\n            <path\r\n                d=\"M19.25 5.25049V19.5005C19.25 19.6994 19.171 19.8902 19.0303 20.0308C18.8897 20.1715 18.6989 20.2505 18.5 20.2505H6.5C6.30109 20.2505 6.11032 20.1715 5.96967 20.0308C5.82902 19.8902 5.75 19.6994 5.75 19.5005V5.25049\"\r\n                stroke=\"#666666\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n            />\r\n            <path\r\n                d=\"M16.25 5.25049V3.75049C16.25 3.35266 16.092 2.97113 15.8107 2.68983C15.5294 2.40852 15.1478 2.25049 14.75 2.25049H10.25C9.85218 2.25049 9.47064 2.40852 9.18934 2.68983C8.90804 2.97113 8.75 3.35266 8.75 3.75049V5.25049\"\r\n                stroke=\"#666666\"\r\n                strokeWidth=\"2\"\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n            />\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default IconTrash;\r\n","import { Input, InputProps } from 'antd';\r\nimport { SearchProps } from 'antd/es/input';\r\nimport React from 'react';\r\n\r\ntype Props = {\r\n  headTitle: string;\r\n  onSearch?: SearchProps['onSearch'];\r\n  search?: InputProps;\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n};\r\nconst TableHead: React.FC<Props> = (props: Props) => {\r\n  const { className, headTitle, onSearch, search, children } = props;\r\n  return (\r\n    <div className={`flex items-center mb-6 gap-6 ${className}`}>\r\n      <div className=\"font-medium\">{headTitle}</div>\r\n      <div className=\"\">\r\n        <Input.Search\r\n          placeholder=\"Input search text\"\r\n          allowClear\r\n          style={{ width: 264, height: 32 }}\r\n          onSearch={onSearch}\r\n          {...search}\r\n        />\r\n      </div>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TableHead;\r\n","\r\nfunction IconArrowLeft({ color = '#666666' }) {\r\n  return (\r\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <path d=\"M15.7049 16.59L11.1249 12L15.7049 7.41L14.2949 6L8.29492 12L14.2949 18L15.7049 16.59Z\" fill={color} />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default IconArrowLeft;\r\n","function IconArrowRight({ color = '#666666' }) {\r\n  return (\r\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <path d=\"M8.29492 16.59L12.8749 12L8.29492 7.41L9.70492 6L15.7049 12L9.70492 18L8.29492 16.59Z\" fill={color} />\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default IconArrowRight;\r\n","import { InputProps, Table, TablePaginationConfig, TableProps } from 'antd';\r\nimport IconArrowLeft from 'assets/Icon/IconArrowLeft';\r\nimport IconArrowRight from 'assets/Icon/IconArrowRight';\r\nimport React, { useMemo, useState } from 'react';\r\ninterface IProps extends TableProps {\r\n  pagination: TablePaginationConfig;\r\n  searchInput?: InputProps;\r\n  tClassName?: string;\r\n  searchComponent?: React.ReactNode;\r\n  dataSource: any[];\r\n  currentPage?: number;\r\n  showPaging?: boolean;\r\n}\r\nconst BaseTable: React.FC<IProps> = (props: IProps) => {\r\n  const { tClassName, loading, columns, pagination, dataSource, searchComponent, currentPage, showPaging } = props;\r\n  const [pageSize, setPageSize] = useState((pagination && pagination.pageSize) || 10);\r\n  const position = showPaging ? 'bottomRight' : 'none';\r\n\r\n  const totalPages = useMemo(() => {\r\n    return pagination.total && pagination.pageSize && Math.ceil(pagination.total / pagination.pageSize);\r\n  }, [pagination.total, pagination.pageSize]);\r\n\r\n  const currentPageNumber = useMemo(() => {\r\n    return currentPage || 1;\r\n  }, [currentPage]);\r\n\r\n  return (\r\n    <div className={tClassName && tClassName + ' rounded-2xl bg-white'}>\r\n      {searchComponent}\r\n      <Table\r\n        loading={loading}\r\n        rowKey=\"id\"\r\n        columns={columns}\r\n        dataSource={dataSource}\r\n        scroll={{ x: 1500, y: 500 }}\r\n        pagination={{\r\n          pageSize: pageSize,\r\n          current: currentPageNumber,\r\n          onShowSizeChange: (_, size) => setPageSize(size),\r\n          showTotal() {\r\n            return (\r\n              <div className=\"text-sm\">\r\n                Page {currentPageNumber} of {totalPages}\r\n              </div>\r\n            );\r\n          },\r\n          itemRender(page, type, element) {\r\n            const FIRST_PAGE = 1;\r\n            if (type === 'next')\r\n              return <>{currentPageNumber === totalPages ? <IconArrowRight color=\"#949494\" /> : <IconArrowRight />}</>;\r\n            if (type === 'prev')\r\n              return <>{currentPageNumber === FIRST_PAGE ? <IconArrowLeft color=\"#949494\" /> : <IconArrowLeft />}</>;\r\n          },\r\n          position: [position],\r\n          ...pagination\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default BaseTable;\r\n","import { CloseOutlined } from '@ant-design/icons';\r\nimport { Button, Col, DatePicker, Form, Input, Row, Select, Tag } from 'antd';\r\nimport { getDepartments, getExperiences, getLocations, getWorkingTime } from 'apis/modules/Common';\r\nimport dayjs from 'dayjs';\r\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\r\nimport { IJobForm } from 'models/jobs';\r\nimport { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\ndayjs.extend(customParseFormat);\r\n\r\ninterface IProps {\r\n  textButton?: string;\r\n  onSubmit(job: IJobForm, skills: string[], type?: string): void;\r\n  item?: IJobForm;\r\n  isProcess?: boolean;\r\n}\r\n\r\nfunction JobForm(props: IProps) {\r\n  const { t } = useTranslation();\r\n  const navi = useNavigate();\r\n  const [form] = Form.useForm();\r\n  const dateFormat = 'YYYY-MM-DD';\r\n  const { item, onSubmit, textButton, isProcess } = props;\r\n  const [skillsForm, setSkillsForm] = useState<string[]>([]);\r\n  const [options, setOptions] = useState({\r\n    department: [],\r\n    workingTime: [],\r\n    yearOfExperience: [],\r\n    location: []\r\n  });\r\n\r\n  function formatOptions(options: any) {\r\n    return options.map((el: any) => ({ label: el, value: el }));\r\n  }\r\n\r\n  async function getYearOfExperienceOptions() {\r\n    try {\r\n      const response = await getExperiences();\r\n      if (response && response.data) {\r\n        const options = formatOptions(response.data);\r\n        setOptions((prev) => ({ ...prev, yearOfExperience: options }));\r\n      }\r\n    } catch (error) {\r\n      setOptions((prev) => ({ ...prev, yearOfExperience: [] }));\r\n    }\r\n  }\r\n\r\n  async function getDepartmentOptions() {\r\n    try {\r\n      const response = await getDepartments();\r\n      if (response && response.data) {\r\n        const options = formatOptions(response.data);\r\n        setOptions((prev) => ({ ...prev, department: options }));\r\n      }\r\n    } catch (error) {\r\n      setOptions((prev) => ({ ...prev, department: [] }));\r\n    }\r\n  }\r\n\r\n  async function getWorkingTimeOptions() {\r\n    try {\r\n      const response = await getWorkingTime();\r\n      if (response && response.data) {\r\n        const options = formatOptions(response.data);\r\n        setOptions((prev) => ({ ...prev, workingTime: options }));\r\n      }\r\n    } catch (error) {\r\n      setOptions((prev) => ({ ...prev, workingTime: [] }));\r\n    }\r\n  }\r\n\r\n  async function getLocationOptions() {\r\n    try {\r\n      const response = await getLocations();\r\n      if (response && response.data) {\r\n        const options = formatOptions(response.data);\r\n        setOptions((prev) => ({ ...prev, location: options }));\r\n      }\r\n    } catch (error) {\r\n      setOptions((prev) => ({ ...prev, location: [] }));\r\n    }\r\n  }\r\n\r\n  function onSkillsChange(e: any) {\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      if (!e.target.value || !e.target.value.trim() || skillsForm.includes(e.target.value)) {\r\n        return;\r\n      }\r\n\r\n      setSkillsForm((prev) => [...prev, e.target.value.trim()]);\r\n      form.setFieldsValue({\r\n        skills: ''\r\n      });\r\n    }\r\n  }\r\n\r\n  function onRemoveSkill(skill: string) {\r\n    const newTags = skillsForm.filter((tag) => tag !== skill);\r\n    setSkillsForm(newTags);\r\n  }\r\n\r\n  async function getCommonOptions() {\r\n    await getDepartmentOptions();\r\n    await getLocationOptions();\r\n    await getWorkingTimeOptions();\r\n    await getYearOfExperienceOptions();\r\n  }\r\n\r\n  function handleSubmitForm(type?: string) {\r\n    onSubmit(form.getFieldsValue(), skillsForm, type);\r\n    form.submit();\r\n  }\r\n\r\n  useEffect(() => {\r\n    getCommonOptions();\r\n\r\n    return () => {\r\n      setOptions({\r\n        department: [],\r\n        workingTime: [],\r\n        yearOfExperience: [],\r\n        location: []\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (item) {\r\n      // set start date into date picker antd\r\n      const startDate = dayjs(item?.startDate, dateFormat);\r\n      const endDate = dayjs(item?.endDate, dateFormat);\r\n      const skills = item.skills?.map((el: any) => el.skillName);\r\n      const itemForm = { ...item, startDate, endDate, skills: '' };\r\n      setSkillsForm(skills as string[]);\r\n      form.setFieldsValue(itemForm);\r\n    }\r\n\r\n    return () => {\r\n      form.resetFields();\r\n    };\r\n  }, [item]);\r\n\r\n  return (\r\n    <Form layout=\"vertical\" form={form}>\r\n      <h3 className=\"mb-4 font-medium\">Information</h3>\r\n      <Row gutter={10}>\r\n        <Col\r\n          xl={{\r\n            span: 6\r\n          }}\r\n          md={{\r\n            span: 12\r\n          }}\r\n        >\r\n          <Form.Item name=\"department\" label={t('common.label.department')} rules={[{ required: true }]}>\r\n            <Select style={{ width: '100%' }} placeholder={t('common.label.type')} options={options.department} />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col\r\n          xl={{\r\n            span: 6\r\n          }}\r\n          md={{\r\n            span: 12\r\n          }}\r\n        >\r\n          <Form.Item name=\"jobName\" label={t('common.label.jobName')} rules={[{ required: true }]} className=\"my-0\">\r\n            <Input placeholder={t('common.label.jobName')} />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col\r\n          xl={{\r\n            span: 6\r\n          }}\r\n          md={{\r\n            span: 12\r\n          }}\r\n        >\r\n          <Form.Item name=\"workingTime\" label={t('form.jobs.label.workingTime')} rules={[{ required: true }]}>\r\n            <Select placeholder={t('common.label.type')} options={options.workingTime}></Select>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col\r\n          xl={{\r\n            span: 6\r\n          }}\r\n          md={{\r\n            span: 12\r\n          }}\r\n        >\r\n          <Form.Item name=\"city\" label={t('form.jobs.label.cityName')}>\r\n            <Select placeholder={t('form.jobs.label.cityName')} options={options.location}></Select>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col\r\n          xl={{\r\n            span: 6\r\n          }}\r\n          md={{\r\n            span: 12\r\n          }}\r\n        ></Col>\r\n      </Row>\r\n      <Row gutter={10}>\r\n        <Col\r\n          xl={{\r\n            span: 6\r\n          }}\r\n          md={{\r\n            span: 12\r\n          }}\r\n        >\r\n          <Form.Item name=\"experience\" label={t('form.jobs.label.experience')} rules={[{ required: true }]}>\r\n            <Select placeholder={t('common.label.type')} options={options.yearOfExperience}></Select>\r\n          </Form.Item>\r\n        </Col>\r\n        <Col\r\n          xl={{\r\n            span: 6\r\n          }}\r\n          md={{\r\n            span: 12\r\n          }}\r\n        >\r\n          <Form.Item name=\"startDate\" label={t('form.jobs.label.startDate')} rules={[{ required: true }]}>\r\n            <DatePicker\r\n              placeholder={t('form.jobs.label.startDate_placeholder')}\r\n              format={dateFormat}\r\n              maxDate={dayjs(form.getFieldValue('endDate'))}\r\n            />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col\r\n          xl={{\r\n            span: 6\r\n          }}\r\n          md={{\r\n            span: 12\r\n          }}\r\n        >\r\n          <Form.Item name=\"endDate\" label={t('form.jobs.label.endDate')} rules={[{ required: true }]}>\r\n            <DatePicker\r\n              placeholder={t('form.jobs.label.endDate_placeholder')}\r\n              format={dateFormat}\r\n              minDate={dayjs(form.getFieldValue('startDate'))}\r\n            />\r\n          </Form.Item>\r\n        </Col>\r\n        <Col\r\n          xl={{\r\n            span: 6\r\n          }}\r\n          md={{\r\n            span: 12\r\n          }}\r\n        >\r\n          <Form.Item\r\n            name=\"budget\"\r\n            label={t('form.jobs.label.budget')}\r\n            rules={[\r\n              {\r\n                required: true\r\n              }\r\n            ]}\r\n          >\r\n            <Input placeholder={t('form.jobs.label.budget')} />\r\n          </Form.Item>\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={10}>\r\n        <Col\r\n          xl={{\r\n            span: 12\r\n          }}\r\n          md={{\r\n            span: 24\r\n          }}\r\n        >\r\n          <Form.Item\r\n            name=\"skills\"\r\n            label={t('common.label.skills')}\r\n            rules={[{ required: skillsForm.length === 0 }]}\r\n            className=\"my-0\"\r\n          >\r\n            <Input placeholder={t('common.label.skills')} onKeyDown={onSkillsChange} />\r\n          </Form.Item>\r\n          <div className=\"skills my-3\">\r\n            {skillsForm &&\r\n              skillsForm?.map((el: any, id) => {\r\n                return (\r\n                  <Tag key={id} className=\"custom-tag my-1\">\r\n                    <span>\r\n                      {el}\r\n                      <span\r\n                        className=\"close-icon ml-2\"\r\n                        onClick={() => {\r\n                          onRemoveSkill(el);\r\n                        }}\r\n                      >\r\n                        <CloseOutlined width={8} height={8} className=\"cursor-pointer\" />\r\n                      </span>\r\n                    </span>\r\n                  </Tag>\r\n                );\r\n              })}\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Form.Item name=\"description\" label={t('form.jobs.label.description')} rules={[{ required: true }]}>\r\n        <Input.TextArea placeholder={t('form.jobs.label.description')} showCount rows={4} maxLength={100} />\r\n      </Form.Item>\r\n      <Form.Item name=\"requirement\" label={t('form.jobs.label.requirement')} rules={[{ required: true }]}>\r\n        <Input.TextArea placeholder={t('form.jobs.label.requirement')} showCount rows={4} maxLength={100} />\r\n      </Form.Item>\r\n      <Form.Item name=\"preferredQualifications\" label={t('form.jobs.label.preferredQualifications')}>\r\n        <Input.TextArea placeholder={t('form.jobs.label.preferredQualifications')} showCount rows={4} maxLength={100} />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <div className=\"w-full flex justify-end items-center gap-2 mt-6\">\r\n          <Button onClick={() => navi(-1)} className=\"h-10 w-52\">\r\n            {t('common.label.cancel')}\r\n          </Button>\r\n\r\n          {item && (\r\n            <button\r\n              className=\"bg-blue-500 hover:bg-blue-600 text-white h-10 w-52\"\r\n              onClick={() => handleSubmitForm('duplicate')}\r\n              disabled={isProcess}\r\n            >\r\n              {t('common.label.duplicate')}\r\n            </button>\r\n          )}\r\n          <Button className=\"h-10 w-52\" type=\"primary\" danger onClick={() => handleSubmitForm()} disabled={isProcess}>\r\n            {textButton || t('common.label.create')}\r\n          </Button>\r\n        </div>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default JobForm;\r\n","export const CookieKeys = {\r\n  Token: 'Token',\r\n  RefreshToken: 'RefreshToken'\r\n};\r\n\r\nexport const BASE_API_URL = process.env.REACT_APP_BASE_URL;\r\n","import { notification } from 'antd';\r\nimport { IconType } from 'antd/es/notification/interface';\r\n\r\nfunction noti(type: IconType, message: string) {\r\n  return notification.open({\r\n    type,\r\n    message,\r\n    duration: 1\r\n  });\r\n}\r\n\r\nexport default noti;\r\n","export const ACCESS_TOKEN = 'accessToken';\r\nexport const REFRESH_TOKEN = 'refreshToken';\r\nexport const EXPIRED_TIME = 'expiredTime';\r\n\r\nexport enum CANDIDATE_STATUS {\r\n  FAIL = 'FAIL',\r\n  PASS = 'PASS_CV',\r\n  CHECKING = 'CHECKING_CV',\r\n}\r\n","const sleep = (ms: number) => new Promise((r) => setTimeout(r, ms));\r\nconst downloadLink = (url: string) => {\r\n  const baseLink = process.env.REACT_APP_BASE_URL;\r\n  window.open(`${baseLink}/${url}`);\r\n};\r\nexport { sleep, downloadLink };\r\n","import { CloseOutlined } from '@ant-design/icons';\r\nimport { Button, Divider, Drawer, DrawerProps, Form, Input, Select } from 'antd';\r\nimport { ICandidateForm, IListCandidate } from 'models/jobs';\r\nimport { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface IProps extends DrawerProps {\r\n  open?: boolean;\r\n  setOpen(): void;\r\n  onSubmit?(candidate: ICandidateForm): void;\r\n  item?: IListCandidate;\r\n  options?: any;\r\n}\r\n\r\nfunction DrawerHeader({ setOpen }: IProps) {\r\n  return (\r\n    <div className=\"p-6 text-xl w-full text-white bg-red h-20 flex items-center justify-between\">\r\n      <span>Esther Howard</span>\r\n      <CloseOutlined className=\"cursor-pointer\" onClick={() => setOpen()} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DetailDrawer(props: IProps) {\r\n  const { t } = useTranslation();\r\n  const { open, setOpen, onSubmit, item, options } = props;\r\n  const [form] = Form.useForm();\r\n\r\n  const [initialValues] = useState<ICandidateForm>({\r\n    userStatus: item?.status,\r\n    description: item?.fullName\r\n  });\r\n\r\n  const handleCancel = () => {\r\n    setOpen();\r\n    form.resetFields();\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      width={448}\r\n      className=\"ant-drawer-custom\"\r\n      title={<DrawerHeader setOpen={() => setOpen()} />}\r\n      open={open}\r\n      closable={false}\r\n      afterOpenChange={() => form.resetFields()}\r\n    >\r\n      <Form\r\n        layout=\"vertical\"\r\n        className=\"flex flex-col justify-between h-full\"\r\n        form={form}\r\n        onFinish={onSubmit}\r\n        initialValues={initialValues}\r\n      >\r\n        <div>\r\n          <Form.Item label={t('common.label.status')} name=\"userStatus\" rules={[{ required: true }]}>\r\n            <Select placeholder={t('common.label.status')} options={options}></Select>\r\n          </Form.Item>\r\n          <Form.Item label={t('common.label.description')} name=\"description\">\r\n            <Input.TextArea showCount maxLength={100} rows={4} />\r\n          </Form.Item>\r\n        </div>\r\n\r\n        <div className=\"h-full content-end\">\r\n          <Divider />\r\n          <div className=\"flex items-center justify-between gap-4 \">\r\n            <Button className=\"w-full h-10\" onClick={handleCancel}>\r\n              {t('common.label.cancel')}\r\n            </Button>\r\n            <Button className=\"w-full h-10\" danger type=\"primary\" onClick={() => form.submit()}>\r\n              {t('common.label.save')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Form>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nexport default DetailDrawer;\r\n","import { Avatar, Button, Popconfirm, Select, Space, Spin } from 'antd';\r\nimport { ColumnType } from 'antd/es/table';\r\nimport IconPencil from 'assets/Icon/IconPencil';\r\nimport IconTrash from 'assets/Icon/IconTrash';\r\nimport JobForm from 'components/Form/JobForm';\r\nimport { ICandidateForm, IJobForm, IListCandidate } from 'models/jobs';\r\n\r\nimport { deleteCandidate, getListCandidate, updateStatusCandidate } from 'apis/modules/Candidates';\r\nimport { getCandidateStatus } from 'apis/modules/Common';\r\nimport { createJob, getJobById, updateJob } from 'apis/modules/Jobs';\r\nimport BaseTable from 'components/BaseTable';\r\nimport TableHead from 'components/BaseTable/TableHead';\r\nimport { CANDIDATE_STATUS } from 'constants/common';\r\nimport Routers from 'constants/routers';\r\nimport dayjs from 'dayjs';\r\nimport noti from 'libs/notification';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Link, useNavigate, useParams } from 'react-router-dom';\r\nimport { downloadLink } from 'utils/helpers';\r\nimport DetailDrawer from './component/DetailDrawer';\r\n\r\nconst JobDetail: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  const navi = useNavigate();\r\n  const { id } = useParams();\r\n  const [dataSource, setDataSource] = useState<IListCandidate[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingCandidate, setLoadingCandidate] = useState(false);\r\n  const [showDrawer, setShowDrawer] = useState(false);\r\n  const [selectedItem, setSelectedItem] = useState<IListCandidate>();\r\n  const [dataForm, setDataForm] = useState<IJobForm>();\r\n  const [isProcess, setIsProcess] = useState(false);\r\n  const [candidateStatus, setCandidateStatus] = useState([]);\r\n  const [pagingCandidate, setPagingCandidate] = useState({\r\n    total: 0,\r\n    limit: 10,\r\n    page: 1\r\n  });\r\n  const [searchParam, setSearchParam] = useState({\r\n    fullName: undefined,\r\n    status: undefined\r\n  });\r\n\r\n  const columns: ColumnType<IListCandidate>[] = [\r\n    {\r\n      title: t('common.label.fullName'),\r\n      dataIndex: 'fullName',\r\n      key: 'fullName',\r\n      width: 250,\r\n      render(value, record, index) {\r\n        return (\r\n          <Space size={8}>\r\n            <Avatar />\r\n            {record.fullName}\r\n          </Space>\r\n        );\r\n      },\r\n      fixed: true\r\n    },\r\n    {\r\n      title: t('common.label.phoneNumber'),\r\n      dataIndex: 'phoneNumber',\r\n      key: 'phoneNumber'\r\n    },\r\n    {\r\n      title: t('common.label.email'),\r\n      dataIndex: 'email',\r\n      key: 'email',\r\n      width: 230\r\n    },\r\n    {\r\n      title: t('common.label.referer'),\r\n      dataIndex: 'referer',\r\n      key: 'referer'\r\n    },\r\n    {\r\n      title: t('common.label.status'),\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      render(value, record, index) {\r\n        return (\r\n          <span className={record.status === CANDIDATE_STATUS.FAIL ? 'text-red' : 'text-green-600'}>\r\n            {record.status}\r\n          </span>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      title: t('common.label.resume'),\r\n      dataIndex: 'resume',\r\n      key: 'resume',\r\n      render(value, record, index) {\r\n        return (\r\n          <div onClick={() => downloadLink(record.resume)} className=\"text-blue-600 hover:text-red cursor-pointer\">\r\n            {record.resume}\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n\r\n    {\r\n      title: `${t('common.label.other')} ${t('common.label.resume')}`,\r\n      dataIndex: 'otherAttachment',\r\n      key: 'otherAttachment',\r\n      render(value, record, index) {\r\n        return (\r\n          <div\r\n            onClick={() => downloadLink(record.otherAttachment)}\r\n            className=\"text-blue-600 hover:text-red cursor-pointer\"\r\n          >\r\n            {record.otherAttachment}\r\n          </div>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      title: t('common.label.portfolio'),\r\n      dataIndex: 'portfolio',\r\n      key: 'portfolio',\r\n      render(value, record, index) {\r\n        return (\r\n          <Link to={'123'} className=\"text-blue-600 hover:text-red\">\r\n            {record.portfolio}\r\n          </Link>\r\n        );\r\n      }\r\n    },\r\n    {\r\n      title: t('common.label.action'),\r\n      key: 'action',\r\n      width: '150px',\r\n      className: '!text-center',\r\n      render: (_, record) => (\r\n        <div className=\"h-full flex items-center justify-center table--col-action\">\r\n          <Button className=\"outline-none border-0\" onClick={() => handleShowCandiate(record)}>\r\n            <IconPencil />\r\n          </Button>\r\n          <Popconfirm\r\n            title=\"Are you sure delete this candidate?\"\r\n            onConfirm={() => onConfirmDelete(record.id as any)}\r\n            okText=\"Yes\"\r\n            cancelText=\"No\"\r\n            okButtonProps={{ danger: true }}\r\n          >\r\n            <Button className=\"outline-none border-0\">\r\n              <IconTrash />\r\n            </Button>\r\n          </Popconfirm>\r\n        </div>\r\n      )\r\n    }\r\n  ];\r\n\r\n  const fetchDataCandidate = useCallback(async () => {\r\n    try {\r\n      setLoadingCandidate(true);\r\n      const params = {\r\n        limit: pagingCandidate.limit,\r\n        page: pagingCandidate.page,\r\n        ...searchParam\r\n      };\r\n      if (id) {\r\n        const response: any = await getListCandidate(id, params);\r\n\r\n        if (response && response.code === 'SUCCESS' && response.data) {\r\n          setDataSource(response.data);\r\n          setPagingCandidate((prev) => ({\r\n            ...prev,\r\n            total: response.data.total\r\n          }));\r\n        }\r\n      }\r\n    } catch (error) {\r\n      noti('error', 'Failed to get data candidate');\r\n    } finally {\r\n      setLoadingCandidate(false);\r\n    }\r\n  }, [searchParam, pagingCandidate.page, pagingCandidate.limit]);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      if (id) {\r\n        const response = (await getJobById(id)) as any;\r\n        if (response && response.code === 'SUCCESS' && response.data) {\r\n          setDataForm(response.data);\r\n        } else {\r\n          noti('error', response.message);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      noti('error', 'Failed to get data job detail');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const initPage = async () => {\r\n    await getStatusOptions();\r\n    await fetchData();\r\n  };\r\n\r\n  useEffect(() => {\r\n    initPage();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchDataCandidate();\r\n  }, [searchParam, pagingCandidate.limit, pagingCandidate.page]);\r\n\r\n  async function getStatusOptions() {\r\n    try {\r\n      const response = await getCandidateStatus();\r\n      if (response && response.data) {\r\n        const options = response.data.map((el: any) => ({ label: el.status, value: el.code }));\r\n        setCandidateStatus(options);\r\n      }\r\n    } catch (error) {\r\n      setCandidateStatus([]);\r\n    }\r\n  }\r\n\r\n  const onSubmitUpdateJob = async (values: IJobForm, skills: string[]) => {\r\n    try {\r\n      setIsProcess(true);\r\n      const payload = {\r\n        // department: values.department,\r\n        jobName: values.jobName,\r\n        workingTime: values.workingTime,\r\n        city: values.city,\r\n        experience: values.experience,\r\n        startDate: dayjs(values.startDate).format('YYYY-MM-DD'),\r\n        endDate: dayjs(values.endDate).format('YYYY-MM-DD'),\r\n        budget: values.budget && isNaN(values.budget) ? 0 : Number(values.budget),\r\n        requirement: values.requirement,\r\n        description: values.description,\r\n        skills\r\n      };\r\n      const response: any = await updateJob(id, payload);\r\n      if (response && response.code === 'SUCCESS') {\r\n        noti('success', 'Update job successfully');\r\n        navi(Routers.Jobs);\r\n      } else {\r\n        noti('error', response.message);\r\n      }\r\n    } catch (error) {\r\n      noti('error', 'Failed to update job');\r\n    } finally {\r\n      setIsProcess(false);\r\n    }\r\n  };\r\n\r\n  const onSearchCandidates = (value: number | string, key: string) => {\r\n    setPagingCandidate((prev) => {\r\n      return {\r\n        ...prev,\r\n        page: 1\r\n      };\r\n    });\r\n    setSearchParam((prev) => {\r\n      return {\r\n        ...prev,\r\n        [key]: value || undefined\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleShowCandiate = (item: IListCandidate) => {\r\n    setShowDrawer(true);\r\n    setSelectedItem(item);\r\n  };\r\n\r\n  const handleSubmitCandidateForm = async (values: ICandidateForm) => {\r\n    if (!selectedItem) return;\r\n    try {\r\n      setIsProcess(true);\r\n      const response: any = await updateStatusCandidate(selectedItem?.id as number, values.userStatus as string);\r\n      if (response && response.code === 'SUCCESS') {\r\n        noti('success', 'Update candidate successfully');\r\n        fetchDataCandidate();\r\n        setShowDrawer(false);\r\n      } else {\r\n        noti('error', response.message);\r\n      }\r\n    } catch (error) {\r\n      noti('error', 'Failed to update candidate');\r\n    } finally {\r\n      setIsProcess(false);\r\n    }\r\n  };\r\n\r\n  const onConfirmDelete = async (id: string | number) => {\r\n    try {\r\n      const response: any = await deleteCandidate(id);\r\n      if (response && response.code === 'SUCCESS') {\r\n        noti('success', 'Delete successfully');\r\n        fetchDataCandidate();\r\n      } else {\r\n        noti('error', response.message);\r\n      }\r\n    } catch (error: any) {\r\n      noti('error', 'Failed to delete candidate');\r\n    }\r\n  };\r\n\r\n  const onSubmitCopyJob = async (values: IJobForm, skills: string[]) => {\r\n    try {\r\n      setIsProcess(true);\r\n      const payload = {\r\n        jobName: `${values.jobName} Copy`,\r\n        workingTime: values.workingTime,\r\n        city: values.city,\r\n        experience: values.experience,\r\n        startDate: dayjs(values.startDate).format('YYYY-MM-DD'),\r\n        endDate: dayjs(values.endDate).format('YYYY-MM-DD'),\r\n        budget: values.budget && isNaN(values.budget) ? 0 : Number(values.budget),\r\n        requirement: values.requirement,\r\n        description: values.description,\r\n        department: values.department,\r\n        skills\r\n      };\r\n      const response: any = await createJob(payload);\r\n      if (response && response.code === 'SUCCESS') {\r\n        noti('success', 'Copy job successfully');\r\n        navi(Routers.Jobs);\r\n      } else {\r\n        noti('error', response.message);\r\n      }\r\n    } catch (error) {\r\n      noti('error', 'Failed to copy job');\r\n    } finally {\r\n      setIsProcess(false);\r\n    }\r\n  };\r\n\r\n  const onSubmitFormJob = async (values: IJobForm, skills: string[], type?: string) => {\r\n    if (type === 'duplicate') {\r\n      onSubmitCopyJob(values, skills);\r\n    } else {\r\n      onSubmitUpdateJob(values, skills);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-full\">\r\n      <div className=\"h-16 bg-white w-full\">\r\n        <div className=\"flex h-full flex-row justify-between items-center px-6\">\r\n          <div className=\"text-xl font-bold\">{t('page.jobs.titleDetail')}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"my-3 mx-7 rounded-2xl p-4 bg-white\">\r\n        <Spin spinning={loading}>\r\n          <JobForm isProcess={isProcess} item={dataForm} textButton=\"Save\" onSubmit={onSubmitFormJob} />\r\n        </Spin>\r\n        <BaseTable\r\n          loading={loadingCandidate}\r\n          rowKey={(record) => `Candidate-${record.id}`}\r\n          columns={columns}\r\n          dataSource={dataSource}\r\n          showPaging\r\n          currentPage={pagingCandidate.page}\r\n          searchComponent={\r\n            <TableHead\r\n              headTitle={t('page.jobs.label.listCandidate')}\r\n              onSearch={(v) => onSearchCandidates(v, 'fullName')}\r\n            >\r\n              <Select\r\n                placeholder=\"Select status\"\r\n                onChange={(v: number) => onSearchCandidates(v, 'status')}\r\n                style={{\r\n                  width: '220px'\r\n                }}\r\n                options={candidateStatus}\r\n              ></Select>\r\n            </TableHead>\r\n          }\r\n          pagination={{\r\n            total: pagingCandidate.total,\r\n            showSizeChanger: true,\r\n            current: pagingCandidate.page,\r\n            pageSize: pagingCandidate.limit,\r\n            onShowSizeChange(current, size) {\r\n              setPagingCandidate((prev) => {\r\n                return {\r\n                  ...prev,\r\n                  limit: size\r\n                };\r\n              });\r\n            },\r\n            onChange(page) {\r\n              setPagingCandidate((prev) => {\r\n                return {\r\n                  ...prev,\r\n                  page\r\n                };\r\n              });\r\n            }\r\n          }}\r\n        />\r\n        {showDrawer && (\r\n          <DetailDrawer\r\n            item={selectedItem}\r\n            open={showDrawer}\r\n            options={candidateStatus}\r\n            setOpen={() => setShowDrawer(!showDrawer)}\r\n            onSubmit={handleSubmitCandidateForm}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobDetail;\r\n","import { deleteRequest, getRequest, putRequest } from 'apis/services';\r\nimport { IPagingParams } from 'models/common';\r\n\r\ninterface IParamsCandidate extends IPagingParams {\r\n  fullName?: string;\r\n  status?: number;\r\n}\r\nfunction getListCandidate(id: number | string, params?: IParamsCandidate | any) {\r\n  return getRequest({\r\n    url: `/admin/candidates/job/${id}`,\r\n    params: {\r\n      limit: 999999,\r\n      page: 1,\r\n      ...params\r\n    }\r\n  });\r\n}\r\n\r\nfunction updateStatusCandidate(id: number | string, status: string) {\r\n  return putRequest({\r\n    url: `/admin/candidates/${id}`,\r\n    payload: {\r\n      status\r\n    }\r\n  });\r\n}\r\n\r\nfunction deleteCandidate(id: number | string) {\r\n  return deleteRequest({\r\n    url: `/admin/candidates/${id}`\r\n  });\r\n}\r\n\r\nexport { getListCandidate, updateStatusCandidate, deleteCandidate };\r\n"],"names":["getDepartments","getRequest","url","getLocations","getExperiences","getCandidateStatus","getWorkingTime","createJob","newItem","postRequest","payload","getListJob","params","updateJob","id","updatedItem","putRequest","concat","deleteJob","deleteRequest","getJobById","updateStatusJob","status","patchRequest","axiosInstance","axios","create","headers","Accept","baseURL","BASE_API_URL","timeout","validateStatus","interceptors","request","use","token","getCookie","CookieKeys","Token","set","_error","console","log","Promise","reject","message","errors","response","data","error","_error$response","errorResponse","get","post","put","patch","delete","_jsxs","width","height","viewBox","fill","xmlns","children","_jsx","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","props","className","headTitle","onSearch","search","Input","Search","placeholder","allowClear","style","_ref","color","tClassName","loading","columns","pagination","dataSource","searchComponent","currentPage","showPaging","pageSize","setPageSize","useState","position","totalPages","useMemo","total","Math","ceil","currentPageNumber","Table","rowKey","scroll","x","y","current","onShowSizeChange","_","size","showTotal","itemRender","page","type","element","_Fragment","IconArrowRight","IconArrowLeft","dayjs","customParseFormat","t","useTranslation","navi","useNavigate","form","Form","useForm","dateFormat","item","onSubmit","textButton","isProcess","skillsForm","setSkillsForm","options","setOptions","department","workingTime","yearOfExperience","location","formatOptions","map","el","label","value","async","getCommonOptions","prev","getDepartmentOptions","getLocationOptions","getWorkingTimeOptions","getYearOfExperienceOptions","handleSubmitForm","getFieldsValue","submit","useEffect","_item$skills","startDate","endDate","skills","skillName","itemForm","setFieldsValue","resetFields","layout","Row","gutter","Col","xl","span","md","Item","name","rules","required","Select","DatePicker","format","maxDate","getFieldValue","minDate","length","onKeyDown","e","key","preventDefault","target","trim","includes","Tag","onClick","skill","newTags","filter","tag","onRemoveSkill","CloseOutlined","TextArea","showCount","rows","maxLength","Button","disabled","danger","RefreshToken","process","notification","open","duration","CANDIDATE_STATUS","downloadLink","window","DrawerHeader","setOpen","initialValues","userStatus","description","fullName","Drawer","title","closable","afterOpenChange","onFinish","Divider","handleCancel","JobDetail","useParams","setDataSource","setLoading","loadingCandidate","setLoadingCandidate","showDrawer","setShowDrawer","selectedItem","setSelectedItem","dataForm","setDataForm","setIsProcess","candidateStatus","setCandidateStatus","pagingCandidate","setPagingCandidate","limit","searchParam","setSearchParam","undefined","dataIndex","render","record","index","Space","Avatar","fixed","FAIL","resume","otherAttachment","Link","to","portfolio","handleShowCandiate","IconPencil","Popconfirm","onConfirm","onConfirmDelete","okText","cancelText","okButtonProps","IconTrash","fetchDataCandidate","useCallback","getListCandidate","code","noti","initPage","getStatusOptions","fetchData","onSearchCandidates","deleteCandidate","Spin","spinning","JobForm","values","jobName","city","experience","budget","isNaN","Number","requirement","Routers","Jobs","onSubmitCopyJob","onSubmitUpdateJob","BaseTable","TableHead","v","onChange","showSizeChanger","DetailDrawer","updateStatusCandidate"],"sourceRoot":""}